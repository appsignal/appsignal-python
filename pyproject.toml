[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "appsignal-beta"
description = 'The AppSignal integration for the Python programming language'
readme = "README.md"
requires-python = ">=3.8"
keywords = []
authors = [
  { name = "Tom de Bruijn", email = "tom@tomdebruijn.com" },
  { name = "Noemi Lapresta", email = "noemi@appsignal.com" },
  { name = "Luismi Ramirez", email = "luismi@appsignal.com" },
]
classifiers = [
  # Python versions
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  # Application version
  "Development Status :: 3 - Alpha"
]
dependencies = [
  "opentelemetry-api",
  "opentelemetry-sdk",
  "opentelemetry-exporter-otlp-proto-http",
]
dynamic = ["version"]

[project.urls]
Documentation = "https://docs.appsignal.com/python"
Issues = "https://github.com/appsignal/appsignal-python/issues"
Source = "https://github.com/appsignal/appsignal-python"

[project.scripts]
appsignal = "appsignal.cli.base:run"

[tool.pytest.ini_options]
pythonpath = [
  "src"
]
addopts = [
  "--cov-report=term-missing",
  "--cov-report=html",
  "--cov=src/appsignal",
  "--cov-fail-under=84",
]

[tool.hatch.version]
path = "src/appsignal/__about__.py"

[tool.hatch.build]
sources = ["src"]
exclude = ["src/scripts", "tests", "conftest.py"]
artifacts = [
  "src/appsignal/appsignal-agent",
  "src/appsignal/resources/cacert.pem",
  "src/appsignal/py.typed",
]

[tool.hatch.envs.default]
dependencies = [
  "pytest",
  "pytest-cov",
  "pytest-mock",
]

[[tool.hatch.envs.test.matrix]]
python = ["38", "39", "310", "311"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black>=23.1.0",
  "mypy>=1.0.0",
  "isort",
  "ruff>=0.0.243",

  "opentelemetry-api",
  "opentelemetry-sdk",
  "opentelemetry-exporter-otlp-proto-http",

  "hatchling",
  "types-deprecated",
  "types-requests",
  "django-stubs",
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --enable-incomplete-feature=Unpack {args}"
style = [
  "ruff {args:.}",
  "isort --check {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "isort {args:.}",
  "black {args:.}",
  "ruff --fix {args:.}",
]
all = [
  "fmt",
  "style",
  "typing",
]

[tool.ruff]
line-length = 90
extend-exclude = ["src/scripts/agent.py"]
select = [
  "E", "W", "F",  # flake8 (pycodestyle and pyflakes)
  "N",    # pep8-naming
  "B",    # flake8-bugbear
  "UP",   # pyupgrade
  "C4",   # flake8-comprehensions
  "FA",   # flake8-future-annotations
  "ISC",  # flake8-implicit-str-concat
  "PIE",  # flake8-pie
  "RSE",  # flake8-raise
  "RET",  # flake8-return
  "SIM",  # flake8-simplify
  "PERF", # perflint
  "RUF",  # ruff
]
ignore = [
  "SIM117",   # allow nested `with`
  "SIM105",   # allow try-except-pass
  "PERF203",  # allow try-except inside of loops
]

[tool.hatch.envs.build.scripts]
all = "python src/scripts/build_all.py"
me = "_APPSIGNAL_BUILD_AGENT_PATH=\"{args}\" hatch build -t wheel"
for = "_APPSIGNAL_BUILD_TRIPLE=\"{args}\" hatch build -t wheel"

[tool.hatch.build.targets.wheel.hooks.custom]
path = "src/scripts/build_hook.py"
dependencies = ["requests"]

[tool.hatch.build.targets.sdist.hooks.custom]
path = "src/scripts/sdist_hook.py"

[tool.coverage.run]
branch = true
parallel = true
omit = [
  "src/appsignal/__about__.py",
  "src/appsignal/cli/diagnose.py",
  "src/scripts",
]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
  "raise NotImplementedError",
]

[tool.isort]
profile = "black"
lines_after_imports = 2
line_length = 88

[tool.mypy]
files = ["src", "tests"]
check_untyped_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "opentelemetry.instrumentation.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
